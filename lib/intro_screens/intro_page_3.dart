import 'package:flutter/material.dart';
import 'package:animated_text_kit/animated_text_kit.dart';
import 'dart:math' as math; // Import math for PI

class IntroPage3 extends StatefulWidget {
  final VoidCallback? onCommitmentUnderstood; // Callback function

  const IntroPage3({Key? key, this.onCommitmentUnderstood})
    : super(key: key); // Updated constructor

  @override
  _IntroPage3State createState() => _IntroPage3State();
}

class _IntroPage3State extends State<IntroPage3> with TickerProviderStateMixin {
  static const String commitmentText =
      '''ƒêi·ªÅu Kho·∫£n Cam K·∫øt C√° Nh√¢n v√† C·ªông ƒê·ªìng

Xin ch√†o t√¥i l√† Oceanami, ng∆∞·ªùi s√°ng l·∫≠p ra MessageApplication n√†y, t√¥i xin t·ª± nguy·ªán cam k·∫øt:

1.  **T√¥n tr·ªçng v√† L·ªãch s·ª±**: S·∫Ω lu√¥n ƒë·ªëi x·ª≠ v·ªõi m·ªçi ng∆∞·ªùi d√πng kh√°c b·∫±ng s·ª± t√¥n tr·ªçng, kh√¥ng s·ª≠ d·ª•ng ng√¥n t·ª´ g√¢y t·ªïn th∆∞∆°ng, x√∫c ph·∫°m hay ph√¢n bi·ªát ƒë·ªëi x·ª≠.
2.  **B·∫£o m·∫≠t Th√¥ng tin**: √ù th·ª©c ƒë∆∞·ª£c t·∫ßm quan tr·ªçng c·ªßa vi·ªác b·∫£o v·ªá th√¥ng tin c√° nh√¢n c·ªßa b·∫£n th√¢n v√† c·ªßa ng∆∞·ªùi kh√°c. Kh√¥ng chia s·∫ª th√¥ng tin nh·∫°y c·∫£m m·ªôt c√°ch b·ª´a b√£i.
3.  **N·ªôi dung T√≠ch c·ª±c**: Ch·ªâ chia s·∫ª v√† t·∫°o ra nh·ªØng n·ªôi dung l√†nh m·∫°nh, mang t√≠nh x√¢y d·ª±ng, ph√π h·ª£p v·ªõi thu·∫ßn phong m·ªπ t·ª•c v√† ph√°p lu·∫≠t.
4.  **Ch·ªëng Tin gi·∫£ v√† Spam**: Kh√¥ng lan truy·ªÅn tin t·ª©c sai s·ª± th·∫≠t, tin ƒë·ªìn th·∫•t thi·ªát ho·∫∑c g·ª≠i c√°c tin nh·∫Øn kh√¥ng mong mu·ªën (spam) g√¢y phi·ªÅn h√† cho c·ªông ƒë·ªìng.
5.  **ƒê√≥ng g√≥p X√¢y d·ª±ng**: S·∫µn s√†ng ƒë√≥ng g√≥p √Ω ki·∫øn ƒë·ªÉ c·∫£i thi·ªán ·ª©ng d·ª•ng v√† c·ªông ƒë·ªìng ng∆∞·ªùi d√πng m·ªôt c√°ch t√≠ch c·ª±c.

Sau ƒë√¢y l√† n·ªôi quy c·ªßa ·ª©ng d·ª•ng (Lu·∫≠t C·∫•m Ph√°) b·∫Øt bu·ªôc t·∫•t c·∫£ m·ªçi ng∆∞·ªùi ph·∫£i tu√¢n th·ªß:

1. **C·∫•m Ng√¥n t·ª´ X√∫c ph·∫°m**: Kh√¥ng s·ª≠ d·ª•ng ng√¥n t·ª´ th√¥ t·ª•c, x√∫c ph·∫°m, ph√¢n bi·ªát ch·ªßng t·ªôc, gi·ªõi t√≠nh, t√¥n gi√°o ho·∫∑c b·∫•t k·ª≥
2. **C·∫•m Qu·∫•y r·ªëi**: Kh√¥ng qu·∫•y r·ªëi, ƒëe d·ªça ho·∫∑c l√†m phi·ªÅn ng∆∞·ªùi d√πng kh√°c d∆∞·ªõi b·∫•t k·ª≥ h√¨nh th·ª©c n√†o.
3. **C·∫•m Chia s·∫ª N·ªôi dung ƒê·ªôc h·∫°i**: Kh√¥ng chia s·∫ª n·ªôi dung b·∫°o l·ª±c, khi√™u d√¢m, ho·∫∑c b·∫•t k·ª≥ n·ªôi dung n√†o vi ph·∫°m ph√°p lu·∫≠t.
4. **C·∫•m Spam v√† Qu·∫£ng c√°o**: Kh√¥ng g·ª≠i tin nh·∫Øn r√°c, qu·∫£ng c√°o kh√¥ng mong mu·ªën ho·∫∑c li√™n k·∫øt ƒë·∫øn c√°c trang web ƒë·ªôc h·∫°i.
5. **C·∫•m M·∫°o danh**: Kh√¥ng gi·∫£ m·∫°o danh t√≠nh c·ªßa ng∆∞·ªùi kh√°c ho·∫∑c t·∫°o t√†i kho·∫£n gi·∫£ m·∫°o.
6. **C·∫•m Vi ph·∫°m B·∫£n quy·ªÅn**: Kh√¥ng chia s·∫ª n·ªôi dung vi ph·∫°m b·∫£n quy·ªÅn ho·∫∑c quy·ªÅn s·ªü h·ªØu tr√≠ tu·ªá c·ªßa ng∆∞·ªùi kh√°c.
7. **C·∫•m H√†nh vi Gian l·∫≠n**: Kh√¥ng tham gia v√†o c√°c ho·∫°t ƒë·ªông gian l·∫≠n, l·ª´a ƒë·∫£o ho·∫∑c b·∫•t k·ª≥ h√†nh vi n√†o nh·∫±m tr·ª•c l·ª£i c√° nh√¢n.
8. **C·∫•m Ph√° ho·∫°i ·ª®ng d·ª•ng**: Kh√¥ng c·ªë g·∫Øng ph√° ho·∫°i, hack ho·∫∑c l√†m gi√°n ƒëo·∫°n ho·∫°t ƒë·ªông c·ªßa ·ª©ng d·ª•ng ho·∫∑c d·ªãch v·ª• li√™n quan.
9. **C·∫•m Vi ph·∫°m Quy ƒë·ªãnh Ph√°p lu·∫≠t**: Tu√¢n th·ªß t·∫•t c·∫£ c√°c quy ƒë·ªãnh ph√°p lu·∫≠t hi·ªán h√†nh khi s·ª≠ d·ª•ng ·ª©ng d·ª•ng.
10. **C·∫•m Chia s·∫ª Th√¥ng tin Sai l·ªách**: Kh√¥ng lan truy·ªÅn th√¥ng tin sai l·ªách, tin ƒë·ªìn ho·∫∑c n·ªôi dung

## Nh·ªØng ƒêi·ªÅu Sau ƒë∆∞·ª£c Khuy·∫øn kh√≠ch:
1. **T√¥n tr·ªçng Quy·ªÅn Ri√™ng t∆∞**: T√¥n tr·ªçng quy·ªÅn ri√™ng t∆∞ c·ªßa ng∆∞·ªùi kh√°c v√† kh√¥ng chia s·∫ª th√¥ng tin c√° nh√¢n m√† kh√¥ng c√≥ s·ª± ƒë·ªìng √Ω.
2. **Gi√∫p ƒë·ª° Ng∆∞·ªùi kh√°c**: S·∫µn s√†ng gi√∫p ƒë·ª° v√† h·ªó tr·ª£ ng∆∞·ªùi d√πng kh√°c khi h·ªç g·∫∑p kh√≥ khƒÉn.
3. **B√°o c√°o H√†nh vi Vi ph·∫°m**: Ch·ªß ƒë·ªông b√°o c√°o c√°c h√†nh vi vi ph·∫°m quy ƒë·ªãnh ƒë·ªÉ duy tr√¨ m√¥i tr∆∞·ªùng an to√†n cho c·ªông ƒë·ªìng.
4. **Tham gia C·ªông ƒë·ªìng**: Tham gia v√†o c√°c ho·∫°t ƒë·ªông c·ªông ƒë·ªìng, s·ª± ki·ªán ho·∫∑c nh√≥m th·∫£o lu·∫≠n ƒë·ªÉ x√¢y d·ª±ng m·ªëi quan h·ªá t√≠ch c·ª±c.
5. **Ph·∫£n h·ªìi X√¢y d·ª±ng**: Cung c·∫•p ph·∫£n h·ªìi x√¢y d·ª±ng ƒë·ªÉ gi√∫p c·∫£i thi·ªán ·ª©ng d·ª•ng v√† d·ªãch v·ª•.

M·ªçi quy·∫øt ƒë·ªãnh c·ªßa Ng∆∞·ªùi C·∫ßm ƒê·∫ßu Group (Tr√πmMafiaüêß) l√† tuy·ªát ƒë·ªëi. Vi·ªác l√°ch lu·∫≠t l√† kh√¥ng ƒë∆∞·ª£c khuy·∫øn kh√≠ch.
T√¥i hi·ªÉu r·∫±ng vi·ªác duy tr√¨ m·ªôt m√¥i tr∆∞·ªùng tr·ª±c tuy·∫øn an to√†n v√† th√¢n thi·ªán l√† tr√°ch nhi·ªám chung. B·∫±ng vi·ªác ch·∫•p nh·∫≠n nh·ªØng ƒëi·ªÅu kho·∫£n n√†y, t√¥i ƒë·ªìng √Ω h√†nh ƒë·ªông m·ªôt c√°ch c√≥ tr√°ch nhi·ªám.
N·∫øu vi ph·∫°m, t√¥i v√† k·ªÉ c·∫£ c√°c b·∫°n ph·∫£i s·∫µn s√†ng ch·ªãu m·ªçi tr√°ch nhi·ªám v√† h·∫≠u qu·∫£ theo quy ƒë·ªãnh c·ªßa ·ª©ng d·ª•ng v√† ph√°p lu·∫≠t.''';

  late AnimationController _hoverAnimationController;
  late Animation<Offset> _offsetAnimation;
  late AnimationController _flipAnimationController;
  late AnimationController _contentAnimationController;
  late Animation<double> _contentFadeAnimation;
  late Animation<double> _contentSizeAnimation;

  late ScrollController _scrollController;
  bool _hasScrolledToEnd = false;
  // bool _letterInteractionCompleted = false; // Removed this state variable

  @override
  void initState() {
    super.initState();
    _hoverAnimationController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat(reverse: true);

    _offsetAnimation =
        Tween<Offset>(
          begin: Offset.zero,
          end: const Offset(0.0, -0.05),
        ).animate(
          CurvedAnimation(
            parent: _hoverAnimationController,
            curve: Curves.easeInOut,
          ),
        );

    _flipAnimationController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );

    _contentAnimationController = AnimationController(
      duration: const Duration(milliseconds: 400),
      vsync: this,
    );

    _contentFadeAnimation = CurvedAnimation(
      parent: _contentAnimationController,
      curve: Curves.easeInOut,
    );

    _contentSizeAnimation = CurvedAnimation(
      parent: _contentAnimationController,
      curve: Curves.easeInOut,
    );

    _scrollController = ScrollController();
    _scrollController.addListener(_scrollListener);
  }

  @override
  void dispose() {
    _hoverAnimationController.dispose();
    _flipAnimationController.dispose();
    _contentAnimationController.dispose();
    _scrollController.removeListener(_scrollListener);
    _scrollController.dispose();
    super.dispose();
  }

  void _scrollListener() {
    if (_scrollController.position.pixels >=
        _scrollController.position.maxScrollExtent - 10) {
      if (!_hasScrolledToEnd) {
        setState(() {
          _hasScrolledToEnd = true;
        });
      }
    }
  }

  void _handleCommitmentUnderstood() {
    if (!_hasScrolledToEnd) return;

    widget.onCommitmentUnderstood?.call(); // Call the callback

    _toggleLetterOpenClose(); // Proceed to close the letter
  }

  void _toggleLetterOpenClose() {
    if (_flipAnimationController.isAnimating ||
        _contentAnimationController.isAnimating)
      return;

    if (_flipAnimationController.status == AnimationStatus.dismissed) {
      setState(() {
        _hasScrolledToEnd = false;
      });
      _flipAnimationController.forward().then((_) {
        if (mounted) {
          _contentAnimationController.forward().then((_) {
            if (mounted &&
                _scrollController.hasClients &&
                _scrollController.position.maxScrollExtent == 0) {
              setState(() {
                _hasScrolledToEnd = true;
              });
            }
          });
        }
      });
    } else {
      _contentAnimationController.reverse().then((_) {
        if (mounted) _flipAnimationController.reverse();
      });
    }
  }

  Widget _buildLetterContentWidget() {
    final screenHeight = MediaQuery.of(context).size.height;
    return SizeTransition(
      sizeFactor: _contentSizeAnimation,
      axisAlignment: -1.0,
      child: FadeTransition(
        opacity: _contentFadeAnimation,
        child: Padding(
          padding: const EdgeInsets.only(top: 20.0, left: 20.0, right: 20.0),
          child: Center(
            child: ConstrainedBox(
              constraints: BoxConstraints(maxHeight: screenHeight * 0.45),
              child: Container(
                padding: const EdgeInsets.all(15.0),
                decoration: BoxDecoration(
                  color: Colors.white.withOpacity(0.9),
                  borderRadius: BorderRadius.circular(10.0),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      blurRadius: 10.0,
                      spreadRadius: 2.0,
                    ),
                  ],
                ),
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const Text(
                      'ƒêi·ªÅu Kho·∫£n Cam K·∫øt',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Colors.black87,
                      ),
                      textAlign: TextAlign.center,
                    ),
                    const SizedBox(height: 10),
                    Flexible(
                      child: SingleChildScrollView(
                        controller: _scrollController,
                        child: Text(
                          commitmentText,
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.black87,
                            height: 1.5,
                          ),
                          textAlign: TextAlign.justify,
                        ),
                      ),
                    ),
                    const SizedBox(height: 15),
                    TextButton(
                      style: TextButton.styleFrom(
                        backgroundColor: _hasScrolledToEnd
                            ? Colors.pinkAccent.shade100
                            : Colors.grey.shade400,
                        padding: EdgeInsets.symmetric(
                          horizontal: 20,
                          vertical: 10,
                        ),
                      ),
                      child: Text(
                        'ƒê√£ Hi·ªÉu',
                        style: TextStyle(
                          color: _hasScrolledToEnd
                              ? Colors.white
                              : Colors.white70,
                          fontSize: 16,
                        ),
                      ),
                      onPressed: _hasScrolledToEnd
                          ? _handleCommitmentUnderstood
                          : null, // Calls _handleCommitmentUnderstood
                    ),
                  ],
                ),
              ),
            ),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.pinkAccent,
      child: Center(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              AnimatedTextKit(
                animatedTexts: [
                  TypewriterAnimatedText(
                    'C·∫£m ∆°n c√°c b·∫°n ƒë√£ t·ªõi ƒë√¢y <3\n',
                    textAlign: TextAlign.center,
                    textStyle: const TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.w600,
                      color: Colors.white,
                    ),
                    speed: const Duration(milliseconds: 100),
                  ),
                ],
                totalRepeatCount: 1,
                pause: const Duration(milliseconds: 1000),
                displayFullTextOnTap: true,
                stopPauseOnTap: true,
              ),
              const SizedBox(height: 40),
              SlideTransition(
                position: _offsetAnimation,
                child: GestureDetector(
                  onTap: _toggleLetterOpenClose,
                  child: AnimatedBuilder(
                    animation: _flipAnimationController,
                    builder: (BuildContext context, Widget? child) {
                      final animationValue = _flipAnimationController.value;
                      final angle = animationValue * math.pi;
                      Widget iconToDisplay;
                      if (animationValue < 0.5) {
                        iconToDisplay = Icon(
                          Icons.mail_outline,
                          size: 60,
                          color: Colors.white,
                        );
                      } else {
                        iconToDisplay = Transform(
                          transform: Matrix4.rotationY(math.pi),
                          alignment: Alignment.center,
                          child: Icon(
                            Icons.mark_email_read_outlined,
                            size: 60,
                            color: Colors.white,
                          ),
                        );
                      }
                      return Transform(
                        transform: Matrix4.identity()
                          ..setEntry(3, 2, 0.001)
                          ..rotateY(angle),
                        alignment: Alignment.center,
                        child: Container(
                          decoration: BoxDecoration(
                            shape: BoxShape.circle,
                            boxShadow: [
                              BoxShadow(
                                color: Colors.white.withOpacity(0.7),
                                blurRadius: 15.0,
                                spreadRadius: 5.0,
                              ),
                            ],
                          ),
                          child: iconToDisplay,
                        ),
                      );
                    },
                  ),
                ),
              ),
              _buildLetterContentWidget(),
            ],
          ),
        ),
      ),
    );
  }
}
